import pandas as pd
import tkinter as tk
from tkinter import filedialog

def 读取表格():
    root = tk.Tk()
    root.withdraw()
    文件路径 = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx;*.xls")])
    if 文件路径:
        表格 = pd.read_excel(文件路径)
        return 表格, 文件路径
    else:
        return None, None

def 制定生产计划(预测表, 实际需求表, 初始库存=0, 初始缺货量=0, 安全库存比例=0.15, 物料编码='6004010256', 库存成本系数=0.01, 缺货成本系数=1):
    预测表['物料编码'] = 预测表['物料编码'].astype(str)
    实际需求表['物料编码'] = 实际需求表['物料编码'].astype(str)

    # 筛选出指定物料编码的实际需求数据
    实际需求表 = 实际需求表[实际需求表['物料编码'] == 物料编码].copy()

    # 确保周次数据类型一致
    预测表['周次'] = 预测表['周次'].astype(int)
    实际需求表['周次'] = 实际需求表['周次'].astype(int)

    # 按周次分组并计算总的需求量和生产计划
    预测表_grouped = 预测表.groupby('周次').agg({'预测需求': 'sum', '销售单价': 'mean'}).reset_index()  # 修正列名
    实际需求表_grouped = 实际需求表.groupby('周次').agg({'需求量': 'sum'}).reset_index()

    # 合并预测表和实际需求表
    合并表 = pd.merge(预测表_grouped, 实际需求表_grouped, on='周次', how='left')

    合并表['生产计划'] = 0
    合并表['库存量'] = 0
    合并表['缺货量'] = 0
    合并表['服务水平'] = 1.0
    合并表['库存成本'] = 0.0
    合并表['缺货成本'] = 0.0  # 新增缺货成本列

    上周库存 = 初始库存
    上周缺货 = 初始缺货量
    本周生产计划 = 合并表.iloc[0]['需求量']  # 第100周的生产计划设为第101周的实际需求量

    for i in range(len(合并表)):
        预测需求量 = 合并表.iloc[i]['预测需求']
        实际需求量 = 合并表.iloc[i]['需求量'] if not pd.isna(合并表.iloc[i]['需求量']) else 0
        销售单价 = 合并表.iloc[i]['销售单价']  # 修正列名

        if i == 0:
            # 初始生产计划用于第101周
            合并表.at[i, '生产计划'] = 本周生产计划
        else:
            # 计算安全库存
            安全库存 = max(预测需求量 * 安全库存比例, 上周缺货)

            # 计算本周生产计划用于下周的需求
            本周生产计划 = max(预测需求量 + 安全库存 - 上周库存, 0)
            本周生产计划 = round(本周生产计划)

            # 更新生产计划
            合并表.at[i, '生产计划'] = 本周生产计划

        # 本周末的库存和缺货计算
        本周库存 = max(上周库存 + 合并表.at[i-1, '生产计划'] - 实际需求量, 0) if i > 0 else max(上周库存 - 实际需求量, 0)
        本周缺货 = max(实际需求量 - (上周库存 + 合并表.at[i-1, '生产计划']), 0) if i > 0 else max(实际需求量 - 上周库存, 0)
        本周服务水平 = 1 - 本周缺货 / 实际需求量 if 实际需求量 > 0 else 1.0

        # 计算库存成本和缺货成本
        本周库存成本 = 本周库存 * 销售单价 * 库存成本系数  # 修正列名
        本周缺货成本 = 本周缺货 * 销售单价 * 缺货成本系数  # 修正列名

        # 更新数据表
        合并表.at[i, '库存量'] = 本周库存
        合并表.at[i, '缺货量'] = 本周缺货
        合并表.at[i, '服务水平'] = 本周服务水平
        合并表.at[i, '库存成本'] = 本周库存成本
        合并表.at[i, '缺货成本'] = 本周缺货成本

        # 更新为下周使用
        上周库存 = 本周库存
        上周缺货 = 本周缺货

    return 合并表

def 计算平均值(计划表):
    筛选表 = 计划表[(计划表['周次'] >= 101) & (计划表['周次'] <= 177)]
    平均值 = 筛选表.mean()
    return 平均值

def 保存生产计划和综合结果(所有结果, 综合结果, 文件路径):
    save_path = filedialog.asksaveasfilename(initialdir=文件路径, defaultextension=".xlsx",
                                             filetypes=[("Excel files", "*.xlsx")])
    if save_path:
        with pd.ExcelWriter(save_path) as writer:
            for 编码, 计划表 in 所有结果.items():
                计划表.to_excel(writer, sheet_name=f'物料{编码}', index=False)
            综合结果.to_excel(writer, sheet_name='综合结果', index=False)
        print(f"生产计划和综合结果已保存至 {save_path}")

def 主程序():
    预测表, 预测文件路径 = 读取表格()
    实际需求表, _ = 读取表格()

    if 预测表 is not None and 实际需求表 is not None:
        初始库存 = 0
        初始缺货量 = 0
        安全库存比例 = 0.15
        库存成本系数 = 0.01
        缺货成本系数 = 1  # 新增缺货成本系数
        物料编码列表 = ['6004010256', '6004020503', '6004020918', '6004010174', '6004021055', '6004020900']

        所有结果 = {}
        综合结果列表 = []

        for 物料编码 in 物料编码列表:
            生产计划表 = 制定生产计划(预测表, 实际需求表, 初始库存, 初始缺货量, 安全库存比例, 物料编码, 库存成本系数, 缺货成本系数)
            所有结果[物料编码] = 生产计划表

            平均值 = 计算平均值(生产计划表)
            综合结果列表.append({
                '物料编码': 物料编码,
                '平均生产计划数/（件/周）': 平均值['生产计划'],
                '平均实际需求量/（件/周）': 平均值['需求量'],
                '平均库存量/（件/周）': 平均值['库存量'],
                '平均缺货量/（件/周）': 平均值['缺货量'],
                '平均服务水平': 平均值['服务水平'],
                '平均库存成本/（元/周）': 平均值['库存成本'],
                '平均缺货成本/（元/周）': 平均值['缺货成本']
            })

        综合结果 = pd.DataFrame(综合结果列表)

        print("综合结果:")
        print(综合结果)

        保存生产计划和综合结果(所有结果, 综合结果, 预测文件路径)

# 运行主程序
主程序()
