# ========== 第一步：导入必要的库 ==========
# 以下库导入为并列关系，用于不同功能模块
import numpy as np  # 数值计算和数组操作
import matplotlib.pyplot as plt  # 数据可视化和图表绘制
from sklearn.linear_model import LinearRegression  # 线性回归模型
from sklearn.preprocessing import PolynomialFeatures  # 多项式特征转换
from matplotlib import rcParams  # matplotlib配置参数

# ========== 第二步：设置中文字体显示 ==========
# 以下两行为并列关系，共同解决中文显示问题
rcParams['font.sans-serif'] = ['SimHei']  # 使用黑体支持中文显示
rcParams['axes.unicode_minus'] = False  # 正常显示负号

# ========== 第三步：定义实验数据 ==========
# 以下数据定义为并列关系，构成完整的实验数据集

# 3.1 定义物质类别数组
substance = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  # 组胺
                      2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  # 溴酸钾
                      3, 3, 3, 3, 3, 3, 3,  # 工业碱
                      4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                      4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,  # 硫酸铝钾
                      5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])    # 奶中尿素

# 3.2 定义浓度数组
concentration = np.array([0, 100, 50, 25, 12.5, 0, 100, 50, 25, 12.5,  # 组胺
                          0, 100, 50, 25, 12.5, 0, 100, 50, 25, 12.5,  # 溴酸钾
                          7.34, 8.14, 8.74, 9.19, 10.18, 11.8, 0,  # 工业碱
                          0, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,  # 硫酸铝钾
                          1, 1, 1, 1, 1, 1, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5,
                          2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,  # 硫酸铝钾
                          0, 500, 1000, 1500, 2000, 0, 5, 500, 1500, 2000,  # 奶中尿素
                          0, 500, 1000, 1500, 2000])  # 对应的浓度值

# 3.3 定义颜色数据矩阵（蓝、绿、红、色调、饱和度）
color_data = np.array([
    [68, 110, 121, 23, 111],  # 组胺
    [37, 66, 110, 12, 169],
    [46, 87, 117, 16, 155],
    [62, 99, 120, 19, 122],
    [66, 102, 118, 20, 112],
    [65, 110, 120, 24, 115],
    [35, 64, 109, 11, 172],
    [46, 87, 118, 16, 153],
    [60, 99, 120, 19, 126],
    [64, 101, 118, 20, 115],
    [129, 141, 145, 22, 27],  # 溴酸钾
    [7, 133, 145, 27, 241],
    [60, 133, 141, 27, 145],
    [69, 136, 145, 26, 133],
    [85, 139, 145, 26, 106],
    [128, 141, 144, 23, 28],
    [7, 133, 145, 27, 242],
    [57, 133, 141, 27, 151],
    [70, 137, 146, 26, 132],
    [87, 138, 146, 26, 102],
    [153, 140, 132, 108, 35],  # 工业碱
    [151, 142, 133, 104, 29],
    [158, 126, 127, 120, 52],
    [161, 85, 118, 132, 120],
    [127, 21, 119, 147, 211],
    [94, 6, 91, 148, 237],
    [152, 142, 132, 105, 32],
    [116, 126, 104, 76, 44],  # 硫酸铝钾
    [114, 126, 104, 74, 45],
    [118, 125, 105, 78, 40],
    [113, 124, 103, 73, 42],
    [114, 124, 104, 75, 39],
    [113, 126, 104, 72, 45],
    [148, 112, 47, 100, 174],
    [150, 111, 44, 100, 178],
    [138, 118, 71, 98, 123],
    [136, 118, 70, 98, 122],
    [136, 117, 64, 98, 134],
    [136, 118, 64, 97, 135],
    [149, 116, 48, 99, 172],
    [150, 115, 49, 100, 171],
    [147, 119, 55, 99, 159],
    [149, 119, 64, 100, 145],
    [140, 113, 54, 99, 156],
    [137, 111, 51, 99, 160],
    [153, 113, 44, 101, 180],
    [153, 113, 42, 100, 184],
    [153, 115, 50, 101, 171],
    [153, 115, 47, 100, 176],
    [152, 116, 52, 100, 167],
    [153, 116, 49, 100, 171],
    [156, 106, 34, 102, 199],
    [162, 107, 37, 103, 196],
    [161, 110, 40, 102, 190],
    [163, 111, 38, 102, 194],
    [159, 104, 35, 103, 198],
    [158, 105, 35, 103, 198],
    [155, 107, 34, 101, 198],
    [156, 108, 34, 101, 198],
    [152, 116, 48, 100, 174],
    [151, 115, 51, 100, 168],
    [154, 105, 33, 102, 199],
    [156, 105, 35, 102, 197],
    [118, 136, 139, 25, 37],  # 奶中尿素
    [117, 137, 139, 27, 41],
    [108, 136, 138, 28, 54],
    [110, 136, 139, 26, 52],
    [108, 140, 142, 28, 60],
    [120, 136, 138, 26, 33],
    [119, 140, 142, 26, 40],
    [111, 139, 142, 27, 55],
    [107, 136, 139, 26, 58],
    [105, 136, 137, 28, 58],
    [125, 135, 140, 20, 27],
    [114, 134, 138, 25, 44],
    [112, 132, 134, 27, 42],
    [105, 134, 138, 26, 60],
    [107, 135, 138, 26, 57]
])  # 对应的颜色数据：蓝、绿、红、色调、饱和度

# ========== 第四步：初始化分析参数 ==========
# 以下初始化为并列关系，为后续分析做准备
unique_substances = np.unique(substance)  # 获取唯一物质类别
color_features = ['蓝色', '绿色', '红色', '色调', '饱和度']  # 定义颜色特征名称
best_fits = []  # 初始化最佳拟合结果存储列表

# ========== 第五步：对每种物质进行最佳特征选择和回归分析 ==========
for sub in unique_substances:
    # 5.1 初始化最佳拟合参数
    best_r2 = -np.inf  # 初始化最佳R²值
    best_fit_info = None  # 初始化最佳拟合信息

    # 5.2 遍历所有颜色特征通道
    for j in range(5):  # 对应R、G、B、H、V五个通道
        # 5.2.1 数据提取和准备
        sub_idx = substance == sub  # 获取当前物质类别的索引
        X = color_data[sub_idx, j].reshape(-1, 1)  # 提取该类别的颜色数据并调整形状
        y = concentration[sub_idx]  # 提取该类别的浓度值

        # 5.2.2 多项式特征转换和模型训练
        degree = 2  # 设置多项式的阶数，这里使用二次多项式
        poly = PolynomialFeatures(degree)  # 创建多项式特征转换器
        X_poly = poly.fit_transform(X)  # 转换为多项式特征
        model = LinearRegression()  # 创建线性回归模型
        model.fit(X_poly, y)  # 训练模型

        # 5.2.3 计算模型评估指标
        r2 = model.score(X_poly, y)  # 计算决定系数

        # 5.2.4 更新最佳拟合结果
        if r2 > best_r2:
            best_r2 = r2  # 更新最佳R²值
            best_fit_info = {  # 更新最佳拟合信息
                'substance': sub,
                'feature': color_features[j],
                'X': X,
                'y': y,
                'X_fit': np.linspace(X.min(), X.max(), 100).reshape(-1, 1),
                'y_pred': model.predict(poly.transform(np.linspace(X.min(), X.max(), 100).reshape(-1, 1))),
                'r2': r2,
                'equation': ' + '.join(
                    [f'{coeff:.3f}*x^{k}' for k, coeff in enumerate(model.coef_)]) + f' + {model.intercept_:.3f}'
            }

    # 5.3 存储当前物质的最佳拟合结果
    best_fits.append(best_fit_info)

# ========== 第六步：输出分析结果和可视化 ==========
for fit in best_fits:
    # 6.1 输出最佳回归方程和评估指标
    print(f"物质 {fit['substance']} ({fit['feature']}) 的最佳回归方程: y = {fit['equation']} (R²={fit['r2']:.4f})")

    # 6.2 绘制散点图和拟合曲线
    plt.figure()
    plt.scatter(fit['y'], fit['X'], color='blue', label='实际值')  # 绘制实际数据点
    plt.plot(fit['y_pred'], fit['X_fit'], color='red', label='拟合曲线')  # 绘制拟合曲线
    plt.title(f'物质 {fit["substance"]} ({fit["feature"]}): 实际值与预测值 (R²={fit["r2"]:.4f})')  # 设置图表标题
    plt.xlabel('浓度')  # 设置x轴标签
    plt.ylabel(f'{fit["feature"]} 通道特征值')  # 设置y轴标签
    plt.grid(True)  # 显示网格
    plt.legend()  # 显示图例
    plt.show()  # 显示图表
