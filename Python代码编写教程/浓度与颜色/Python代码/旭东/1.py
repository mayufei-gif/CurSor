# ========== 第一步：导入必要的库 ==========
# 以下库导入为并列关系，用于不同功能模块
import numpy as np  # 数值计算和数组操作
import matplotlib.pyplot as plt  # 数据可视化和图表绘制
from sklearn.linear_model import LinearRegression  # 线性回归模型
from sklearn.preprocessing import PolynomialFeatures, StandardScaler, MinMaxScaler  # 数据预处理工具
from matplotlib import rcParams  # matplotlib配置参数

# ========== 第二步：设置中文字体显示 ==========
# 以下两行为并列关系，共同解决中文显示问题
rcParams['font.sans-serif'] = ['SimHei']  # 使用黑体支持中文显示
rcParams['axes.unicode_minus'] = False  # 正常显示负号

# ========== 第三步：定义实验数据 ==========
# 以下数据定义为并列关系，构成完整的实验数据集

# 3.1 定义物质类别数组
substance = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  # 组胺
                      2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  # 溴酸钾
                      3, 3, 3, 3, 3, 3, 3,            # 工业碱
                      4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                      4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                      4, 4, 4, 4, 4, 4,4,4,4,4,4,4,4,4,4,4,  # 硫酸铝钾
                      5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])  # 物质类别，每个类别包含多个样本

# 3.2 定义浓度数组
concentration = np.array([0, 100, 50, 25, 12.5, 0, 100, 50, 25, 12.5,  # 组胺
                          0, 100, 50, 25, 12.5, 0, 100, 50, 25, 12.5,  # 溴酸钾
                          7.34, 8.14, 8.74, 9.19, 10.18, 11.8, 0,      # 工业碱
                          0, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,  # 硫酸铝钾
                          1, 1, 1, 1, 1, 1, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5,
                          2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,         # 硫酸铝钾
                          0, 500, 1000, 1500, 2000, 0, 5, 500, 1500, 2000,  # 奶中尿素
                          0, 500, 1000, 1500, 2000])  # 对应的浓度值

# 3.3 定义每个物质类别的样本数量
sample_count = np.array([10, 10, 7, 36, 15])  # 每个物质类别的样本数量

# 3.4 定义颜色数据矩阵（蓝、绿、红、色调、饱和度）
color_data = np.array([
    [68, 110, 121, 23, 111],  # 组胺
    [37, 66, 110, 12, 169],
    [46, 87, 117, 16, 155],
    [62, 99, 120, 19, 122],
    [66, 102, 118, 20, 112],
    [65, 110, 120, 24, 115],
    [35, 64, 109, 11, 172],
    [46, 87, 118, 16, 153],
    [60, 99, 120, 19, 126],
    [64, 101, 118, 20, 115],
    [129, 141, 145, 22, 27],  # 溴酸钾
    [7, 133, 145, 27, 241],
    [60, 133, 141, 27, 145],
    [69, 136, 145, 26, 133],
    [85, 139, 145, 26, 106],
    [128, 141, 144, 23, 28],
    [7, 133, 145, 27, 242],
    [57, 133, 141, 27, 151],
    [70, 137, 146, 26, 132],
    [87, 138, 146, 26, 102],
    [153, 140, 132, 108, 35],  # 工业碱
    [151, 142, 133, 104, 29],
    [158, 126, 127, 120, 52],
    [161, 85, 118, 132, 120],
    [127, 21, 119, 147, 211],
    [94, 6, 91, 148, 237],
    [152, 142, 132, 105, 32],
    [116, 126, 104, 76, 44],  # 硫酸铝钾
    [114, 126, 104, 74, 45],
    [118, 125, 105, 78, 40],
    [113, 124, 103, 73, 42],
    [114, 124, 104, 75, 39],
    [113, 126, 104, 72, 45],
    [148, 112, 47, 100, 174],
    [150, 111, 44, 100, 178],
    [138, 118, 71, 98, 123],
    [136, 118, 70, 98, 122],
    [136, 117, 64, 98, 134],
    [136, 118, 64, 97, 135],
    [149, 116, 48, 99, 172],
    [150, 115, 49, 100, 171],
    [147, 119, 55, 99, 159],
    [149, 119, 64, 100, 145],
    [140, 113, 54, 99, 156],
    [137, 111, 51, 99, 160],
    [153, 113, 44, 101, 180],
    [153, 113, 42, 100, 184],
    [153, 115, 50, 101, 171],
    [153, 115, 47, 100, 176],
    [152, 116, 52, 100, 167],
    [153, 116, 49, 100, 171],
    [156, 106, 34, 102, 199],
    [162, 107, 37, 103, 196],
    [161, 110, 40, 102, 190],
    [163, 111, 38, 102, 194],
    [159, 104, 35, 103, 198],
    [158, 105, 35, 103, 198],
    [155, 107, 34, 101, 198],
    [156, 108, 34, 101, 198],
    [152, 116, 48, 100, 174],
    [151, 115, 51, 100, 168],
    [154, 105, 33, 102, 199],
    [156, 105, 35, 102, 197],
    [118, 136, 139, 25, 37],  # 奶中尿素
    [117, 137, 139, 27, 41],
    [108, 136, 138, 28, 54],
    [110, 136, 139, 26, 52],
    [108, 140, 142, 28, 60],
    [120, 136, 138, 26, 33],
    [119, 140, 142, 26, 40],
    [111, 139, 142, 27, 55],
    [107, 136, 139, 26, 58],
    [105, 136, 137, 28, 58],
    [125, 135, 140, 20, 27],
    [114, 134, 138, 25, 44],
    [112, 132, 134, 27, 42],
    [105, 134, 138, 26, 60],
    [107, 135, 138, 26, 57]
])  # 对应的颜色数据：蓝、绿、红、色调、饱和度

# ========== 第四步：设置权重参数 ==========
# 以下权重设置为并列关系，用于不同特征的加权计算
weights_rgb = np.array([0.3, 0.3, 0.3])  # RGB每个通道的权重
weights_hsv = np.array([0.05, 0.05])  # 色调和饱和度的权重

# ========== 第五步：颜色特征组合和标准化 ==========
# 5.1 计算RGB加权组合特征
color_combined = np.sum(color_data[:, 0:3] * weights_rgb, axis=1)

# 5.2 对组合特征进行标准化处理
scaler = StandardScaler()
color_combined = scaler.fit_transform(color_combined.reshape(-1, 1))

# ========== 第六步：初始化分析参数 ==========
# 以下初始化为并列关系，为后续分析做准备
unique_substances = np.unique(substance)  # 获取唯一物质类别
results = []  # 初始化结果存储列表
degree = 3  # 设置多项式的阶数，这里使用三次多项式

# ========== 第七步：对每种物质进行回归分析 ==========
for i, sub in enumerate(unique_substances):
    # 7.1 数据提取和准备
    sub_idx = substance == sub  # 获取当前物质类别的索引
    X = color_combined[sub_idx].reshape(-1, 1)  # 提取该类别的颜色数据并调整形状
    y = concentration[sub_idx]  # 提取该类别的浓度值

    # 7.2 多项式特征转换和模型训练
    poly = PolynomialFeatures(degree)  # 创建多项式特征转换器
    X_poly = poly.fit_transform(X)  # 转换为多项式特征
    model = LinearRegression()  # 创建线性回归模型
    model.fit(X_poly, y)  # 训练模型

    # 7.3 提取回归方程参数
    coefficients = model.coef_  # 获取回归系数
    intercept = model.intercept_  # 获取截距

    # 7.4 构建和输出回归方程
    equation_terms = [f'{coeff:.3f}*x^{i}' for i, coeff in enumerate(coefficients)]
    equation = ' + '.join(equation_terms) + f' + {intercept:.3f}'
    print(f"物质 {sub} 的回归方程: y = {equation}")

    # 7.5 生成预测数据用于绘图
    X_fit = np.linspace(X.min(), X.max(), 100).reshape(-1, 1)  # 生成更密集的点以显示曲线
    y_pred = model.predict(poly.transform(X_fit))  # 预测对应的浓度值

    # 7.6 计算模型评估指标
    mse = np.mean((model.predict(X_poly) - y) ** 2)  # 计算均方误差
    r2 = model.score(X_poly, y)  # 计算决定系数

    # 7.7 计算样本分布特征
    sample_distribution = np.std(y)  # 计算浓度值的标准差

    # 7.8 计算综合评分
    scaler_minmax = MinMaxScaler()  # 创建最小-最大标准化器
    normalized_values = scaler_minmax.fit_transform(np.array([r2, mse, sample_count[i]]).reshape(-1, 1)).flatten()  # 标准化评估指标
    weights = np.array([0.64, -0.27, 0.18])  # MSE为负权重，因为越小越好，样本数量的权重为0.1
    composite_score = np.sum(weights * normalized_values)  # 计算综合评分

    # 7.9 存储分析结果
    results.append({
        'wuzhi': sub,
        'MSE': mse,
        'R2': r2,
        'yangbenfengbu': sample_distribution,
        'zhonghepinfeng': composite_score,
        'samples': sample_count[i]
    })

    # 7.10 输出分析结果
    print(f'MSE: {mse:.4f}')
    print(f'R²: {r2:.4f}')
    print(f'样本分布（标准差）: {sample_distribution:.4f}')
    print(f'样本数量: {sample_count[i]}')
    print(f'综合评分: {composite_score:.4f}')

    # 7.11 绘制散点图和拟合曲线
    plt.figure()
    plt.scatter(y, X, color='blue', label='实际值')  # 绘制实际数据点
    plt.plot(y_pred, X_fit, color='red', label='拟合曲线')  # 绘制拟合曲线
    plt.title(f'物质 {sub}: 实际值与预测值')  # 设置图表标题
    plt.xlabel('浓度')  # 设置x轴标签
    plt.ylabel('颜色特征')  # 设置y轴标签
    plt.grid(True)  # 显示网格
    plt.legend()  # 显示图例
    plt.show()  # 显示图表